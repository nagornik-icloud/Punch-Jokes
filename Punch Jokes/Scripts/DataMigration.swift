import Foundation
import FirebaseFirestore
import FirebaseCore
import SwiftUI

// MARK: - JSON Models
private struct JsonJoke: Codable {
    let setup: String
    let punchline: String
}

private struct JsonData: Codable {
    let jokes: [JsonJoke]
}

// MARK: - Helper Functions
private func randomDate2024() -> Date {
    let calendar = Calendar.current
    let startDate = calendar.date(from: DateComponents(year: 2024, month: 1, day: 1))!
    let endDate = calendar.date(from: DateComponents(year: 2024, month: 12, day: 31))!
    let randomTimeInterval = TimeInterval.random(in: startDate.timeIntervalSince1970...endDate.timeIntervalSince1970)
    return Date(timeIntervalSince1970: randomTimeInterval)
}

private func generateAdditionalPunchlines(originalJoke: String) -> [String] {
    let punchlines = [
        "–≠—Ç–æ –±—ã–ª–æ –Ω–µ–æ–∂–∏–¥–∞–Ω–Ω–æ!",
        "–í–æ—Ç —ç—Ç–æ –ø–æ–≤–æ—Ä–æ—Ç!",
        "–ù–µ –º–æ–≥—É –ø–µ—Ä–µ—Å—Ç–∞—Ç—å —Å–º–µ—è—Ç—å—Å—è",
        "–ö–ª–∞—Å—Å–∏–∫–∞ –∂–∞–Ω—Ä–∞",
        "–≠—Ç–æ –≥–µ–Ω–∏–∞–ª—å–Ω–æ",
        "–ü—Ä–æ–¥–æ–ª–∂–∞–π –≤ —Ç–æ–º –∂–µ –¥—É—Ö–µ",
        "–•–∞-—Ö–∞, –æ—Ç–ª–∏—á–Ω–∞—è —à—É—Ç–∫–∞",
        "–≠—Ç–æ —á—Ç–æ-—Ç–æ –Ω–æ–≤–µ–Ω—å–∫–æ–µ",
        "–ë—Ä–∞–≤–æ!",
        "–í–æ—Ç —ç—Ç–æ –¥–∞!",
        "–ù–µ –æ–∂–∏–¥–∞–ª —Ç–∞–∫–æ–≥–æ —Ñ–∏–Ω–∞–ª–∞",
        "–≠—Ç–æ —Å—Ç–æ–∏–ª–æ –ø—Ä–æ—á–∏—Ç–∞—Ç—å",
        "–ü—Ä–æ—Å—Ç–æ —Å—É–ø–µ—Ä",
        "–û—Ç–ª–∏—á–Ω–æ–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ",
        "–í–µ–ª–∏–∫–æ–ª–µ–ø–Ω–æ!"
    ]
    
    let count = Int.random(in: 0...13)
    return Array(punchlines.shuffled().prefix(count))
}

// MARK: - Migration Service
enum MigrationError: Error {
    case jsonLoadFailed
    case jsonDecodeFailed
}

final class DataMigrationService {
    static let shared = DataMigrationService()
    private init() {}
    
    private let authorId = "IpxCc4U4c9RuufyYJRmfZtvbUmE3"
    private var migrationCallback: ((String) -> Void)?
    
    func migrate(progressCallback: @escaping (String) -> Void) async throws {
        self.migrationCallback = progressCallback
        
        // –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –∏–∑ JSON
        let jsonContent = try await loadJSONData()
        updateStatus("üìñ –ó–∞–≥—Ä—É–∂–µ–Ω–æ \(jsonContent.jokes.count) —à—É—Ç–æ–∫ –∏–∑ JSON")
        
        // –£–¥–∞–ª–µ–Ω–∏–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –¥–∞–Ω–Ω—ã—Ö
        try await deleteExistingData()
        updateStatus("‚úÖ –°—É—â–µ—Å—Ç–≤—É—é—â–∏–µ —à—É—Ç–∫–∏ —É–¥–∞–ª–µ–Ω—ã")
        
        // –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤—ã—Ö —à—É—Ç–æ–∫
        try await createNewJokes(from: jsonContent)
        updateStatus("‚úÖ –ú–∏–≥—Ä–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")
    }
    
    private func updateStatus(_ status: String) {
        Task { @MainActor in
            migrationCallback?(status)
        }
    }
    
    private func loadJSONData() async throws -> JsonData {
        guard let path = Bundle.main.path(forResource: "jokes", ofType: "json") else {
            throw MigrationError.jsonLoadFailed
        }
        
        let jsonString = try String(contentsOfFile: path, encoding: .utf8)
        guard let jsonData = jsonString.data(using: .utf8),
              let content = try? JSONDecoder().decode(JsonData.self, from: jsonData) else {
            throw MigrationError.jsonDecodeFailed
        }
        
        return content
    }
    
    private func deleteExistingData() async throws {
        updateStatus("üóë –£–¥–∞–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ —à—É—Ç–∫–∏...")
        let db = Firestore.firestore()
        let batch = db.batch()
        let jokesSnapshot = try await db.collection("jokes").getDocuments()
        
        for document in jokesSnapshot.documents {
            let punchlinesSnapshot = try await document.reference.collection("punchlines").getDocuments()
            for punchline in punchlinesSnapshot.documents {
                batch.deleteDocument(punchline.reference)
            }
            batch.deleteDocument(document.reference)
        }
        
        try await batch.commit()
    }
    
    private func createNewJokes(from data: JsonData) async throws {
        updateStatus("üìù –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–µ —à—É—Ç–∫–∏...")
        let db = Firestore.firestore()
        
        for (index, joke) in data.jokes.enumerated() {
            let jokeId = UUID().uuidString
            let jokeRef = db.collection("jokes").document(jokeId)
            
            // –°–æ–∑–¥–∞–µ–º —à—É—Ç–∫—É
            try await jokeRef.setData([
                "id": jokeId,
                "setup": joke.setup,
                "status": "approved",
                "authorId": authorId,
                "createdAt": Timestamp(date: randomDate2024()),
                "views": Int.random(in: 0...20000),
                "likes": Int.random(in: 0...100),
                "dislikes": Int.random(in: 0...100)
            ])
            
            // –î–æ–±–∞–≤–ª—è–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π –ø–∞–Ω—á–ª–∞–π–Ω
            let originalPunchlineId = UUID().uuidString
            try await jokeRef.collection("punchlines").document(originalPunchlineId).setData([
                "id": originalPunchlineId,
                "text": joke.punchline,
                "likes": Int.random(in: 0...100),
                "dislikes": Int.random(in: 0...100),
                "status": "approved",
                "authorId": authorId,
                "createdAt": Timestamp(date: randomDate2024())
            ])
            
            // –î–æ–±–∞–≤–ª—è–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–∞–Ω—á–ª–∞–π–Ω—ã
            for punchline in generateAdditionalPunchlines(originalJoke: joke.punchline) {
                let punchlineId = UUID().uuidString
                try await jokeRef.collection("punchlines").document(punchlineId).setData([
                    "id": punchlineId,
                    "text": punchline,
                    "likes": Int.random(in: 0...100),
                    "dislikes": Int.random(in: 0...100),
                    "status": "approved",
                    "authorId": authorId,
                    "createdAt": Timestamp(date: randomDate2024())
                ])
            }
            
            updateStatus("‚è≥ –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ \(index + 1)/\(data.jokes.count) —à—É—Ç–æ–∫")
        }
    }
}

// MARK: - Migration View
struct DataMigrationView: View {
    @State private var isLoading = false
    @State private var status = "–ì–æ—Ç–æ–≤ –∫ –º–∏–≥—Ä–∞—Ü–∏–∏"
    
    var body: some View {
        VStack(spacing: 20) {
            if isLoading {
                ProgressView()
                    .scaleEffect(1.5)
            }
            
            Text(status)
                .multilineTextAlignment(.center)
                .padding()
            
            if !isLoading {
                Button("–ù–∞—á–∞—Ç—å –º–∏–≥—Ä–∞—Ü–∏—é") {
                    startMigration()
                }
                .buttonStyle(.borderedProminent)
            }
        }
        .frame(maxWidth: .infinity, maxHeight: .infinity)
        .background(Color(.systemBackground))
    }
    
    private func startMigration() {
        Task { @MainActor in
            isLoading = true
            status = "–ù–∞—á–∏–Ω–∞–µ–º –º–∏–≥—Ä–∞—Ü–∏—é..."
            
            do {
                try await DataMigrationService.shared.migrate { status in
                    self.status = status
                }
            } catch {
                status = "‚ùå –û—à–∏–±–∫–∞: \(error.localizedDescription)"
            }
            
            isLoading = false
        }
    }
}

// MARK: - Preview
struct DataMigrationPreview: PreviewProvider {
    static var previews: some View {
        DataMigrationView()
    }
}
